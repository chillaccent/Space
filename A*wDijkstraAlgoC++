#include <iostream>
#include <vector>
#include <queue>
#include <cmath>
#include <unordered_set>
#include <boost/heap/fibonacci_heap.hpp>

using namespace std;
using boost::heap::fibonacci_heap;

// Define a struct to represent a node in the graph
struct Node {
    int x, y, z;
    double f, g, h;
    Node* parent;

    Node(int x, int y, int z, double f, double g, double h, Node* parent) :
        x(x), y(y), z(z), f(f), g(g), h(h), parent(parent) {}
};

struct HashNodePtr {
    size_t operator()(const Node* node) const {
        return reinterpret_cast<size_t>(node);
    }
};


// Define a function to get the neighbors of a node
vector<Node*> get_neighbors(Node* node) {
    vector<Node*> neighbors;
    int x = node->x;
    int y = node->y;
    int z = node->z;
    for (int i = -1; i <= 1; i++) {
        for (int j = -1; j <= 1; j++) {
            for (int k = -1; k <= 1; k++) {
                if (i == 0 && j == 0 && k == 0) {
                    continue;
                }
                int nx = x + i;
                int ny = y + j;
                int nz = z + k;
                if (nx >= 0 && nx < GRID_SIZE && ny >= 0 && ny < GRID_SIZE && nz >= 0 && nz < GRID_SIZE) {
                    Node* neighbor = new Node(nx, ny, nz, 0, 0, 0, nullptr);
                    if (grid[nx][ny][nz] != OBSTACLE) {
                        neighbors.push_back(neighbor);
                    } else {
                        delete neighbor; // deallocate memory if not added to neighbors
                    }
                }
            }
        }
    }
    return neighbors;
}



// Define a function to compute the Euclidean distance between two nodes
double euclidean_distance(Node* node1, Node* node2) {
    int dx = node1->x - node2->x;
    int dy = node1->y - node2->y;
    int dz = node1->z - node2->z;
    return sqrt(dx * dx + dy * dy + dz * dz);
}

// Define a function to compute the heuristic for a node
double heuristic(Node* node, Node* goal) {
    return euclidean_distance(node, goal);
}

// Define a function to compare two nodes by their f-values
class CompareNodes {
public:
    bool operator()(Node* node1, Node* node2) {
        return node1->f > node2->f;
    }
};

// Define the A* search algorithm with Dijkstra's backup
vector<Node*> astar_search_with_dijkstra(Node* start, Node* goal) {
    // Initialize the open and closed lists for A*
    fibonacci_heap<Node*, boost::heap::compare<CompareNodes>> open_list;
    unordered_set<Node*, HashNodePtr> closed_list;

    // Initialize the open and closed lists for Dijkstra's algorithm
    priority_queue<Node*, vector<Node*>, CompareNodes> dijkstra_open_list;
    unordered_set<Node*, HashNodePtr> dijkstra_closed_list;

    // Add the start node to the open list for A*
    start->g = 0;
    start->h = heuristic(start, goal);
    start->f = start->g + start->h;
    open_list.push(start);

    // Add the start node to the open list for Dijkstra's algorithm
    start->g = 0;
    start->parent = nullptr;
    dijkstra_open_list.push(start);

    while (!open_list.empty()) {
        // Get the node with the lowest f-value
        Node* current = open_list.top();
        open_list.pop();

        // Check if the current node is the goal node
        if (current == goal) {
            // Reconstruct the path from the start to the goal node
            vector<Node*> path;
            Node* node = current;
            while (node != NULL) {
                path.push_back(node);
                node = node->parent;
            }
            reverse(path.begin(), path.end());
            return path;
        }

        // Add the current node to the closed list for A*
        closed_list.insert(current);

        // Get the neighbors of the current node
        vector<Node*> neighbors = get_neighbors(current);

        for (Node* neighbor : neighbors) {
            // Compute the tentative g-value for the neighbor
            double tentative_g = current->g + euclidean_distance(current, neighbor);

            // Check if the neighbor is in the closed list for A*
            if (closed_list.count(neighbor) > 0) {
                continue;
            }

            // Check if the neighbor is already in the open list for A*
            bool neighbor_in_open_list =false;
        for (auto it = open_list.ordered_begin(); it != open_list.ordered_end(); ++it) {
            if (*it == neighbor) {
                neighbor_in_open_list = true;
                break;
            }
        }

        // If the neighbor is not in the open list for A*, add it
        if (!neighbor_in_open_list) {
            neighbor->parent = current;
            neighbor->g = tentative_g;
            neighbor->h = heuristic(neighbor, goal);
            neighbor->f = neighbor->g + neighbor->h;
            open_list.push(neighbor);
        }
        // If the neighbor is already in the open list for A*, update its g-value if the new g-value is lower
        else {
            for (auto it = open_list.ordered_begin(); it != open_list.ordered_end(); ++it) {
                if (*it == neighbor) {
                    if (tentative_g < neighbor->g) {
                        neighbor->parent = current;
                        neighbor->g = tentative_g;
                        neighbor->f = neighbor->g + neighbor->h;
                        open_list.increase(it, neighbor);
                    }
                    break;
                }
            }
        }

        // Check if the neighbor is in the closed list for Dijkstra's algorithm
        if (dijkstra_closed_list.count(neighbor) > 0) {
            continue;
        }

        // Compute the tentative distance for the neighbor in Dijkstra's algorithm
        double tentative_distance = current->g + euclidean_distance(current, neighbor);

        // If the neighbor is not in the open list for Dijkstra's algorithm, add it
        if (!neighbor_in_open_list) {
            neighbor->parent = current;
            neighbor->g = tentative_distance;
            dijkstra_open_list.push(neighbor);
        }
        // If the neighbor is already in the open list for Dijkstra's algorithm, update its g-value if the new g-value is lower
        else {
            for (auto it = dijkstra_open_list.begin(); it != dijkstra_open_list.end(); ++it) {
                if (*it == neighbor) {
                    if (tentative_distance < neighbor->g) {
                        neighbor->parent = current;
                        neighbor->g = tentative_distance;
                        dijkstra_open_list.push(neighbor);
                    }
                    break;
                }
            }
        }
    }

    // Add the current node to the closed list for Dijkstra's algorithm
    dijkstra_closed_list.insert(current);
}

// If there is no path from the start to the goal node, return an empty vector
return vector<Node*>();
}