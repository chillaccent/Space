#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <fstream>
#include <unordered_set>
#include <boost/heap/fibonacci_heap.hpp>

using namespace std;
using boost::heap::fibonacci_heap;

// Define a struct to represent a puzzle piece with position and ID
struct PuzzlePiece {
    int id;
    double x;
    double y;
    double z;
};

// Define a struct to represent an edge between two puzzle pieces
struct Edge {
    PuzzlePiece from;
    PuzzlePiece to;
    double cost;
};

// Define a function to compute the Euclidean distance between two puzzle pieces
double distance(PuzzlePiece p1, PuzzlePiece p2) {
    return sqrt(pow(p1.x - p2.x, 2) + pow(p1.y - p2.y, 2) + pow(p1.z - p2.z, 2));
}

// Define a function to check if a puzzle piece is in the way of the vehicle
bool inTheWay(PuzzlePiece piece, vector<PuzzlePiece> piecesInWay) {
    for (auto p : piecesInWay) {
        if (distance(piece, p) < 2.0) {  // Assume pieces are 2 units apart
            return true;
        }
    }
    return false;
}

// Define the PRM algorithm function
vector<PuzzlePiece> prm(vector<PuzzlePiece> pieces, vector<PuzzlePiece> piecesInWay) {
    // Generate a graph of nodes connected by edges using the PRM algorithm
    vector<Edge> graph;
    for (auto p1 : pieces) {
        for (auto p2 : pieces) {
            if (p1.id != p2.id && !inTheWay(p1, piecesInWay) && !inTheWay(p2, piecesInWay)) {
                double dist = distance(p1, p2);
                if (dist < 10.0) {  // Assume maximum distance between pieces is 10 units
                    Edge e = {p1, p2, dist};
                    graph.push_back(e);
                }
            }
        }
    }

    // Sort edges by cost in ascending order
    sort(graph.begin(), graph.end(), [](const Edge & a, const Edge & b) {
        return a.cost < b.cost;
    });

// Define a struct to represent a node in the A* search tree
struct Node {
PuzzlePiece piece;
double g; // cost from start to current node
double h; // heuristic cost from current node to goal
double f; // estimated total cost (f = g + h)

bool operator<(const Node & other) const {
    return f > other.f;  // used for ordering the heap
}
};

// Define a function to compute the heuristic cost between two puzzle pieces
double heuristic(PuzzlePiece p1, PuzzlePiece p2) {
return distance(p1, p2);
}

// Define a function to compute the Euclidean distance between two nodes
double euclidean_distance(Node* node1, Node* node2) {
   int dx = node1->x - node2->x;
   int dy = node1->y - node2->y;
   int dz = node1->z - node2->z;
   return sqrt(dx * dx + dy * dy + dz * dz);
}


// Define a function to check if a node is within the corridor bounds
bool is_node_within_corridor(Node* node, vector<Node*>& corridor) {
   for (Node* corridor_node : corridor) {
       if (corridor_node->x == node->x && corridor_node->y == node->y && corridor_node->z == node->z) {
           return true;
       }
   }
   return false;
}


// Define a function to compute the Constrained Heuristic for a node
double constrained_heuristic(Node* node, Node* goal, vector<Node*>& corridor) {
   double min_dist = INFINITY;
   for (Node* corridor_node : corridor) {
       double dist = euclidean_distance(node, corridor_node) + euclidean_distance(corridor_node, goal);
       if (dist < min_dist) {
           min_dist = dist;
       }
   }
   return min_dist;
}


// Define a function to compare two nodes by their f-values
class CompareNodes {
public:
   bool operator()(Node* node1, Node* node2) {
       return node1->f > node2->f;
   }
};




// Define the A* search algorithm with Dijkstra's backup
vector<Node*> astar_search_with_dijkstra(Node* start, Node* goal, vector<Node*>& corridor) {
   // Initialize the open and closed lists for A*
   fibonacci_heap<Node*, boost::heap::compare<CompareNodes>> open_list;
   unordered_set<Node*, HashNodePtr> closed_list;


   // Initialize the open and closed lists for Dijkstra's algorithm
   priority_queue<Node*, vector<Node*>, CompareNodes> dijkstra_open_list;
   unordered_set<Node*, HashNodePtr> dijkstra_closed_list;


   // Add the start node to the open list for A*
   start->g = 0;
   start->h = euclidean_distance(start, goal);
   start->f = start->g + constrained_heuristic(start, goal, corridor);
   open_list.push(start);


   // Add the start node to the open list for Dijkstra's algorithm
   start->g = 0;
   start->parent = nullptr;
   dijkstra_open_list.push(start);


   while (!open_list.empty()) {
       // Get the node with the lowest f-value
       Node* current = open_list.top();
       open_list.pop();


       // Check if the current node is the goal node
       if (current == goal) {
           // Reconstruct the path from the start to the goal node
           vector<Node*> path;
           Node* node = current;
           while (node != NULL) {
               path.push_back(node);
               node = node->parent;
           }
           reverse(path.begin(), path.end());
           return path;
       }


       // Add the current node to the closed list for A*
       closed_list.insert(current);


       // Get the neighbors of the current node
       vector<Node*> neighbors = get_neighbors(current);


       for (Node* neighbor : neighbors) {
           // Check if the neighbor is within the corridor bounds
           if (!is_node_within_corridor(neighbor, corridor)) {
               continue;
           }


           // Check if the neighbor is in the closed list for A*
           if (closed_list.count(neighbor) > 0) {
               continue;
           }


           // Compute the tentative g-value for the neighbor
           double tentative_g = current->g + euclidean_distance(current, neighbor);


           // Check if the neighbor is already in the open list for A*
           bool neighbor_in_open_list = false;
           fibonacci_heap<Node*, boost::heap::compare<CompareNodes>>::handle_type neighbor_handle;
           for (auto handle = open_list.ordered_begin(); handle != open_list.ordered_end(); ++handle) {
               if (*handle == neighbor) {
                   neighbor_in_open_list = true;
                   neighbor_handle = handle.get_handle();
                   break;
               }
           }


           // If the neighbor is not in the open list for A*, add it with the computed g- and f-values
           if (!neighbor_in_open_list) {
               neighbor->g = tentative_g;
               neighbor->h = euclidean_distance(neighbor, goal);
               neighbor->f = neighbor->g + constrained_heuristic(neighbor, goal, corridor);
               neighbor->parent = current;
               open_list.push(neighbor);
           }
           // If the neighbor is in the open list for A* and the tentative g-value is lower than its current g-value,
           // update its g- and f-values and its parent node
          else if (tentative_g < neighbor->g) {
                neighbor->g = tentative_g;
                neighbor->f = neighbor->g + constrained_heuristic(neighbor, goal, corridor);
                neighbor->parent = current;
o               pen_list.update(neighbor_handle, neighbor);
}


// Check if the neighbor is in the closed list for Dijkstra's algorithm
    if (dijkstra_closed_list.count(neighbor) > 0) {
continue;
}


// Compute the tentative distance for the neighbor in Dijkstra's algorithm
double tentative_distance = current->g + euclidean_distance(current, neighbor);


// If the neighbor is not in the open list for Dijkstra's algorithm, add it with the computed distance
if (!neighbor_in_open_list) {
neighbor->g = tentative_distance;
neighbor->parent = current;
dijkstra_open_list.push(neighbor);
}
// If the neighbor is in the open list for Dijkstra's algorithm and the tentative distance is lower than its current distance,
// update its distance and parent node
else if (tentative_distance < neighbor->g) {
neighbor->g = tentative_distance;
neighbor->parent = current;
dijkstra_open_list.push(neighbor);
}
}
int main() {
// Create a corridor by importing it from the PRM function
vector<Node*> prm_path = prm_search();
vector<Node*> corridor;
for (Node* node : prm_path) {
// Define the width of the corridor as 2 units in each direction
for (int i = -2; i <= 2; i++) {
for (int j = -2; j <= 2; j++) {
for (int k = -2; k <= 2; k++) {
corridor.push_back(new Node(node->x + i, node->y + j, node->z + k, 0, 0, 0, NULL));
}
}
}
}


// Define the start and goal nodes
Node* start = new Node(0, 0, 0, 0, 0, 0, NULL);
Node* goal = new Node(100, 100, 100, 0, 0, 0, NULL);


// Run the A* search algorithm with the constrained heuristic
vector<Node*> path = astar_search(start, goal, corridor);

    // Build the path by traversing the prev array
    int current = pieces.size() - 1;
    while (current != -1) {
        path.push_back(pieces[current]);
        current = prev[current];
    }
    reverse(path.begin(), path.end());

   // Write the path to the output file
    if (outFile.is_open()) {
        for (auto p : path) {
            outFile << p.x << " " << p.y << " " << p.z << endl;
        }
        outFile.close();
    } else {
        cout << "Error: Unable to open file." << endl;
    }

    // Return the path
    return path;
}
